{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Router from 'next/router';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport AppMenu from '../components/AppMenu';\nimport Loading from '../components/Loading';\nimport Footer from '../components/Footer';\nimport Symptom from '../components/Symptom';\nimport symptoms from '../json/symptoms.json';\nimport '../styles/status.css';\nimport diagnostic from '../util/diagnostic';\nexport var __N_SSP = true;\nexport default function status(_ref) {\n  var user = _ref.user,\n      isAuth = _ref.isAuth;\n\n  var _useState = useState({\n    latitude: null,\n    longitude: null\n  }),\n      coords = _useState[0],\n      setCoords = _useState[1];\n\n  var _useState2 = useState([]),\n      selectedSymptoms = _useState2[0],\n      setSelectedSymptoms = _useState2[1];\n\n  function getUserLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        var _position$coords = position.coords,\n            latitude = _position$coords.latitude,\n            longitude = _position$coords.longitude;\n        setCoords({\n          latitude: latitude,\n          longitude: longitude\n        });\n      });\n    } else {\n      Swal.fire({\n        title: 'Erro',\n        text: 'Seu navegador não possui suporte a geolocalização',\n        icon: 'error',\n        confirmButtonColor: '#961d66',\n        confirmButtonText: 'OK'\n      });\n      Router.push('/');\n    }\n  }\n\n  function selectSymptom(symptom) {\n    if (selectedSymptoms.includes(symptom)) {\n      setSelectedSymptoms(selectedSymptoms.filter(function (item) {\n        return item !== symptom;\n      }));\n      return;\n    }\n\n    setSelectedSymptoms([].concat(_toConsumableArray(selectedSymptoms), [symptom]));\n  } // userId\n\n\n  function handleSave() {\n    return _handleSave.apply(this, arguments);\n  }\n\n  function _handleSave() {\n    _handleSave = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var status, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              status = diagnostic(selectedSymptoms);\n              _context.next = 3;\n              return axios.post('/api/createStatus', {\n                symptoms: selectedSymptoms,\n                coords: coords,\n                status: status\n              }, {\n                headers: {\n                  userId: user.sub\n                }\n              });\n\n            case 3:\n              response = _context.sent;\n\n              if (response.status !== 200) {\n                Swal.fire({\n                  title: 'Erro',\n                  text: 'Ocorreu um erro ao salvar suas informações. Tente novamente.',\n                  icon: 'error',\n                  confirmButtonColor: '#961d66',\n                  confirmButtonText: 'OK',\n                  customClass: {\n                    confirmButton: 'swal-confirm-button'\n                  }\n                });\n              }\n\n              if (!(status === 'covid')) {\n                _context.next = 8;\n                break;\n              }\n\n              Swal.fire({\n                title: 'Cuidado!',\n                text: 'Você possui uma grande chance de está contaminado. Procure um médico.',\n                confirmButtonColor: '#961d66',\n                confirmButtonText: 'OK'\n              }).then(function (result) {\n                if (result.value) {\n                  Router.push('/app');\n                }\n              });\n              return _context.abrupt(\"return\");\n\n            case 8:\n              if (!(status === 'suspect')) {\n                _context.next = 11;\n                break;\n              }\n\n              Swal.fire({\n                title: 'Gripe',\n                text: 'Você possui grande chance de está apenas gripado ou resfriado.',\n                confirmButtonColor: '#961d66',\n                confirmButtonText: 'OK'\n              }).then(function (result) {\n                if (result.value) {\n                  Router.push('/app');\n                }\n              });\n              return _context.abrupt(\"return\");\n\n            case 11:\n              if (status === 'healthy') {\n                Swal.fire({\n                  title: 'Saúdavel',\n                  text: 'Aparentemente você está saúdavel. Tome todas as medidas de prevenção para continuar assim.',\n                  confirmButtonColor: '#961d66',\n                  confirmButtonText: 'OK'\n                }).then(function (result) {\n                  if (result.value) {\n                    Router.push('/app');\n                  }\n                });\n              }\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _handleSave.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    if (!isAuth) Router.push('/');\n    getUserLocation();\n  }, [isAuth]);\n\n  if (isAuth) {\n    return __jsx(React.Fragment, null, __jsx(AppMenu, {\n      user: user\n    }), __jsx(\"div\", {\n      className: \"status-container\"\n    }, __jsx(\"div\", {\n      className: \"content\"\n    }, __jsx(\"div\", {\n      className: \"nurse-container\"\n    }, __jsx(\"img\", {\n      src: \"assets/icons/nurse.svg\",\n      alt: \"Nurse icon\"\n    }), __jsx(\"p\", null, \"Ol\\xE1 \", __jsx(\"b\", null, user.name), \", como voc\\xEA est\\xE1 se sentindo hoje? Selecione abaixo os sintomas que voc\\xEA esta sentindo. Caso n\\xE3o esteja apresentando nenhum, clique em continuar.\", ' ')), __jsx(\"div\", {\n      className: \"symptoms-container\"\n    }, symptoms.map(function (symptom) {\n      return __jsx(Symptom, {\n        key: symptom.value,\n        onClick: selectSymptom,\n        selected: selectedSymptoms.includes(symptom.name),\n        symptom: symptom\n      });\n    })), __jsx(\"div\", {\n      className: \"save-button-container\"\n    }, __jsx(\"button\", {\n      type: \"button\",\n      onClick: handleSave\n    }, \"Continuar\")))), __jsx(Footer, null));\n  }\n\n  return __jsx(\"div\", {\n    className: \"center-content fullscreen\"\n  }, __jsx(Loading, null));\n}","map":null,"metadata":{},"sourceType":"module"}