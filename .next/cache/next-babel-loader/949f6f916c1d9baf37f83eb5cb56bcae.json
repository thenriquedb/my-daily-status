{"ast":null,"code":"var _jsxFileName = \"/home/thiago/Documentos/Dev/Projetos/fullstack-lab/pages/app.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport GoogleMapReact from 'google-map-react'; // import axios from 'axios';\n\nimport Router from 'next/router';\nimport AppMenu from '../components/AppMenu';\nimport Loading from '../components/Loading';\nimport auth0 from '../lib/auth0';\nimport getCurrentDate from '../util/getCurrentDate';\nimport { db } from '../lib/firebase';\nimport '../styles/app.css';\n\nconst AnyReactComponent = ({\n  text\n}) => __jsx(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 41\n  }\n}, text);\n\nexport default function App({\n  isAuth,\n  hasRegisteredDailyStatus,\n  user,\n  nearbyUsers = []\n}) {\n  const {\n    0: coords,\n    1: setCoords\n  } = useState({\n    latitude: null,\n    longitude: null\n  });\n\n  function getUserLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCoords({\n          latitude,\n          longitude\n        });\n      });\n    } else {\n      alert('Seu navegador não possui suporte a geolocalização');\n      Router.push('/');\n    }\n  }\n\n  useEffect(() => {\n    if (!isAuth) Router.push('/');\n    if (!hasRegisteredDailyStatus) Router.push('/status');\n    getUserLocation(); // await axios.post('/api/user/')\n  }, [isAuth]);\n\n  if (isAuth) {\n    return __jsx(React.Fragment, null, __jsx(AppMenu, {\n      user: user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }), \"aaaaaa\", __jsx(\"div\", {\n      className: \"app-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, __jsx(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: 'AIzaSyDc4CkmlXdS1_w2Pg9z32LifASGs_ryEFc' // key: process.env.GOOGLE_MAPS_KEY,\n\n      },\n      defaultCenter: {\n        lat: coords.latitude,\n        lng: coords.longitude\n      },\n      defaultZoom: 11,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  return __jsx(\"div\", {\n    className: \"center-content fullscreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }));\n}\nexport async function getServerSideProps({\n  req,\n  res\n}) {\n  const session = await auth0.getSession(req); // Verifica se o usuário está logado\n\n  if (!session) {\n    return {\n      props: {\n        isAuth: false\n      }\n    };\n  }\n\n  const currentDate = getCurrentDate();\n  const userDailyStatus = await db.collection('users').doc(session.user.sub).collection('history').doc(currentDate).get();\n  const todayRegistered = userDailyStatus.data();\n\n  if (!todayRegistered) {\n    return {\n      props: {\n        isAuth: true,\n        hasRegisteredDailyStatus: false,\n        user: session.user\n      }\n    };\n  } // Caso o usuário já tenha cadastrado seu status diário, será verificado todos os\n  // usúarios que estao proximos dele\n\n\n  const {\n    coordinates\n  } = todayRegistered;\n  const nearbyUsers = await db.collection('markers').doc(currentDate).collection('checks').near({\n    center: coordinates,\n    radius: 1000\n  }).get();\n  const nearbyUsersList = [];\n  nearbyUsers.docs.forEach(doc => {\n    nearbyUsersList.push({\n      id: doc.id,\n      status: doc.data().status,\n      coordinates: {\n        longitude: doc.data().coordinates.longitude,\n        latitude: doc.data().coordinates.latitude\n      }\n    });\n  });\n  return {\n    props: {\n      isAuth: true,\n      hasRegisteredDailyStatus: true,\n      user: session.user,\n      nearbyUsers: nearbyUsersList\n    }\n  };\n}","map":{"version":3,"sources":["/home/thiago/Documentos/Dev/Projetos/fullstack-lab/pages/app.js"],"names":["React","useState","useEffect","GoogleMapReact","Router","AppMenu","Loading","auth0","getCurrentDate","db","AnyReactComponent","text","App","isAuth","hasRegisteredDailyStatus","user","nearbyUsers","coords","setCoords","latitude","longitude","getUserLocation","navigator","geolocation","getCurrentPosition","position","alert","push","key","lat","lng","getServerSideProps","req","res","session","getSession","props","currentDate","userDailyStatus","collection","doc","sub","get","todayRegistered","data","coordinates","near","center","radius","nearbyUsersList","docs","forEach","id","status"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport GoogleMapReact from 'google-map-react';\n// import axios from 'axios';\nimport Router from 'next/router';\nimport AppMenu from '../components/AppMenu';\nimport Loading from '../components/Loading';\n\nimport auth0 from '../lib/auth0';\nimport getCurrentDate from '../util/getCurrentDate';\nimport { db } from '../lib/firebase';\n\nimport '../styles/app.css';\n\nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\n\nexport default function App({\n  isAuth,\n  hasRegisteredDailyStatus,\n  user,\n  nearbyUsers = [],\n}) {\n  const [coords, setCoords] = useState({ latitude: null, longitude: null });\n\n  function getUserLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        const { latitude, longitude } = position.coords;\n        setCoords({ latitude, longitude });\n      });\n    } else {\n      alert('Seu navegador não possui suporte a geolocalização');\n      Router.push('/');\n    }\n  }\n\n  useEffect(() => {\n    if (!isAuth) Router.push('/');\n    if (!hasRegisteredDailyStatus) Router.push('/status');\n\n    getUserLocation();\n\n    // await axios.post('/api/user/')\n  }, [isAuth]);\n\n  if (isAuth) {\n    return (\n      <>\n        <AppMenu user={user} />\n        aaaaaa\n        <div className=\"app-container\">\n          <GoogleMapReact\n            bootstrapURLKeys={{\n              key: 'AIzaSyDc4CkmlXdS1_w2Pg9z32LifASGs_ryEFc',\n              // key: process.env.GOOGLE_MAPS_KEY,\n            }}\n            defaultCenter={{\n              lat: coords.latitude,\n              lng: coords.longitude,\n            }}\n            defaultZoom={11}\n          >\n            {/* <AnyReactComponent\n              lat={coords.latitude}\n              lng={coords.longitude}\n              text=\"eu\"\n            /> */}\n          </GoogleMapReact>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"center-content fullscreen\">\n      <Loading />\n    </div>\n  );\n}\n\nexport async function getServerSideProps({ req, res }) {\n  const session = await auth0.getSession(req);\n\n  // Verifica se o usuário está logado\n  if (!session) {\n    return {\n      props: {\n        isAuth: false,\n      },\n    };\n  }\n\n  const currentDate = getCurrentDate();\n\n  const userDailyStatus = await db\n    .collection('users')\n    .doc(session.user.sub)\n    .collection('history')\n    .doc(currentDate)\n    .get();\n\n  const todayRegistered = userDailyStatus.data();\n\n  if (!todayRegistered) {\n    return {\n      props: {\n        isAuth: true,\n        hasRegisteredDailyStatus: false,\n        user: session.user,\n      },\n    };\n  }\n\n  // Caso o usuário já tenha cadastrado seu status diário, será verificado todos os\n  // usúarios que estao proximos dele\n  const { coordinates } = todayRegistered;\n\n  const nearbyUsers = await db\n    .collection('markers')\n    .doc(currentDate)\n    .collection('checks')\n    .near({\n      center: coordinates,\n      radius: 1000,\n    })\n    .get();\n\n  const nearbyUsersList = [];\n\n  nearbyUsers.docs.forEach((doc) => {\n    nearbyUsersList.push({\n      id: doc.id,\n      status: doc.data().status,\n      coordinates: {\n        longitude: doc.data().coordinates.longitude,\n        latitude: doc.data().coordinates.latitude,\n      },\n    });\n  });\n\n  return {\n    props: {\n      isAuth: true,\n      hasRegisteredDailyStatus: true,\n      user: session.user,\n      nearbyUsers: nearbyUsersList,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}