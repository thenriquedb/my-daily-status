{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Head from 'next/head';\nimport Router from 'next/router';\nimport Swal from 'sweetalert2';\nimport { FaCompass, FaSearch } from 'react-icons/fa';\nimport AppMenu from '../components/AppMenu';\nimport Loading from '../components/Loading';\nimport Map from '../components/Map';\nimport VirusSvg from '../public/assets/icons/virus.svg';\nimport '../styles/app.css';\nexport var __N_SSP = true;\nexport default function App(_ref) {\n  var isAuth = _ref.isAuth,\n      hasRegisteredDailyStatus = _ref.hasRegisteredDailyStatus,\n      user = _ref.user;\n\n  var _useState = useState({\n    latitude: null,\n    longitude: null\n  }),\n      coords = _useState[0],\n      setCoords = _useState[1];\n\n  var _useState2 = useState(10),\n      radius = _useState2[0],\n      setRadius = _useState2[1];\n\n  var _useState3 = useState('all'),\n      filter = _useState3[0],\n      setFilter = _useState3[1];\n\n  var _useState4 = useState([]),\n      nearbyUsers = _useState4[0],\n      setNearbyUsers = _useState4[1];\n\n  function getUserLocation() {\n    if (!navigator.geolocation) {\n      Swal.fire({\n        title: 'Erro',\n        text: 'Seu navegador não possui suporte a geolocalização. Utilize outro navegador para continuar utilizando o My Daily Status',\n        icon: 'error',\n        confirmButtonColor: '#961d66'\n      }).then(function (result) {\n        if (result) Router.push('/');\n      });\n    }\n\n    navigator.geolocation.getCurrentPosition(function (position) {\n      var _position$coords = position.coords,\n          latitude = _position$coords.latitude,\n          longitude = _position$coords.longitude;\n      setCoords({\n        latitude: latitude,\n        longitude: longitude\n      });\n    }, function (err) {\n      Swal.fire({\n        title: 'Erro',\n        text: 'Erro ao tentar sua localização. Recarregue a pagina para tentar novamente.',\n        icon: 'error',\n        confirmButtonColor: '#961d66'\n      }).then(function (result) {\n        document.location.reload(true);\n      });\n    }, {\n      timeout: 10000\n    });\n  }\n\n  function getNearbUsers() {\n    return _getNearbUsers.apply(this, arguments);\n  }\n\n  function _getNearbUsers() {\n    _getNearbUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios.get('/api/nearby-users', {\n                params: {\n                  latitude: parseFloat(coords.latitude),\n                  longitude: parseFloat(coords.longitude),\n                  filter: filter,\n                  radius: parseFloat(radius)\n                },\n                headers: {\n                  userId: user.sub\n                }\n              });\n\n            case 2:\n              response = _context.sent;\n              data = response.data;\n              setNearbyUsers(data.nearbyUsers);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _getNearbUsers.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    if (!isAuth) {\n      Router.push('/');\n      return;\n    }\n\n    if (!hasRegisteredDailyStatus) {\n      Router.push('/status');\n      return;\n    }\n\n    getUserLocation();\n  }, []);\n  useEffect(function () {\n    if (coords.latitude && coords.longitude) getNearbUsers();\n  }, [coords]);\n\n  if (isAuth && coords.latitude && coords.longitude) {\n    return __jsx(React.Fragment, null, __jsx(AppMenu, {\n      user: user\n    }), __jsx(Head, null, __jsx(\"title\", null, \"My Dayly Status \"), __jsx(\"meta\", {\n      property: \"og:title\",\n      content: \"My page title\",\n      key: \"title\"\n    })), __jsx(\"div\", {\n      className: \"app-container\"\n    }, __jsx(Map, {\n      nearbyUsers: nearbyUsers,\n      user: user,\n      defaultCenter: {\n        lat: coords.latitude,\n        lng: coords.longitude\n      },\n      zoom: 13\n    }), __jsx(\"div\", {\n      className: \"filter-bar\"\n    }, __jsx(\"div\", {\n      className: \"input-container\"\n    }, __jsx(\"div\", {\n      className: \"icon\"\n    }, __jsx(FaCompass, {\n      color: \"#fff\",\n      size: 24\n    })), __jsx(\"input\", {\n      value: radius,\n      type: \"number\",\n      onChange: function onChange(e) {\n        return setRadius(e.target.value);\n      },\n      placeholder: \"Raio de busca (KM)\"\n    }), __jsx(\"p\", null, \"KM\")), __jsx(\"div\", {\n      className: \"select-container\"\n    }, __jsx(\"div\", {\n      className: \"icon\"\n    }, __jsx(VirusSvg, {\n      fill: \"#fff\"\n    })), __jsx(\"select\", {\n      onChange: function onChange(e) {\n        return setFilter(e.target.value);\n      },\n      value: filter\n    }, __jsx(\"option\", {\n      value: \"covid\"\n    }, \"Covid\"), __jsx(\"option\", {\n      value: \"suspect\"\n    }, \"Suspeitos\"), __jsx(\"option\", {\n      value: \"all\"\n    }, \"Todos as pessoas\"))), __jsx(\"button\", {\n      type: \"button\",\n      onClick: function onClick() {\n        return getNearbUsers();\n      },\n      className: \"search-button\"\n    }, __jsx(FaSearch, {\n      color: \"#fff\",\n      size: 18\n    })))));\n  }\n\n  return __jsx(\"div\", {\n    className: \"center-content fullscreen\"\n  }, __jsx(Loading, null));\n}","map":null,"metadata":{},"sourceType":"module"}