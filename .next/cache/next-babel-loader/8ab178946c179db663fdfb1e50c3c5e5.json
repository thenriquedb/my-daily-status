{"ast":null,"code":"import { db } from '../../lib/firebase';\nimport auth0 from '../../lib/auth0';\nimport getCurrentDate from '../../util/getCurrentDate';\nexport default async function (req, res) {\n  const session = await auth0.getSession(req); // Verifica se o usuário está logado\n\n  if (!session) {\n    return res.status(401).json({\n      props: {\n        isAuth: false\n      }\n    });\n  }\n  /*\n   * Verifica se o usuário já cadastrou seu status diario\n   */\n\n\n  const currentDate = getCurrentDate();\n  const userDailyStatus = await db.collection('users').doc(session.user.sub).collection('history').doc(currentDate).get();\n  const todayRegistered = userDailyStatus.data();\n\n  if (!todayRegistered) {\n    return res.json({\n      props: {\n        isAuth: true,\n        hasRegisteredDailyStatus: false,\n        user: session.user\n      }\n    });\n  }\n\n  const filter = req.query;\n  const coordinates = req.body;\n  /* Caso o usuário já tenha cadastrado seu status diário, será verificado\n   * todos os usúarios que estao proximos dele\n   */\n\n  const nearbyUsers = await db.collection('history').doc('2020-04-20').collection('all').where('status', '==', filter).near({\n    center: coordinates,\n    radius: 10000\n  }).get();\n  const nearbyUsersList = [];\n  nearbyUsers.docs.forEach(doc => {\n    nearbyUsersList.push({\n      id: doc.id,\n      status: doc.data().status,\n      coordinates: {\n        longitude: doc.data().coordinates.longitude,\n        latitude: doc.data().coordinates.latitude\n      }\n    });\n  });\n  return res.status(200).json({\n    props: {\n      isAuth: true,\n      hasRegisteredDailyStatus: true,\n      user: session.user,\n      nearbyUsers: nearbyUsersList\n    }\n  });\n}","map":{"version":3,"sources":["/home/thiago/Documentos/Dev/Projetos/fullstack-lab/pages/api/nearby-users.js"],"names":["db","auth0","getCurrentDate","req","res","session","getSession","status","json","props","isAuth","currentDate","userDailyStatus","collection","doc","user","sub","get","todayRegistered","data","hasRegisteredDailyStatus","filter","query","coordinates","body","nearbyUsers","where","near","center","radius","nearbyUsersList","docs","forEach","push","id","longitude","latitude"],"mappings":"AAAA,SAASA,EAAT,QAAmB,oBAAnB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AAEA,OAAOC,cAAP,MAA2B,2BAA3B;AAEA,eAAe,gBAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AACvC,QAAMC,OAAO,GAAG,MAAMJ,KAAK,CAACK,UAAN,CAAiBH,GAAjB,CAAtB,CADuC,CAGvC;;AACA,MAAI,CAACE,OAAL,EAAc;AACZ,WAAOD,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,MAAAA,KAAK,EAAE;AACLC,QAAAA,MAAM,EAAE;AADH;AADmB,KAArB,CAAP;AAKD;AAED;;;;;AAGA,QAAMC,WAAW,GAAGT,cAAc,EAAlC;AAEA,QAAMU,eAAe,GAAG,MAAMZ,EAAE,CAC7Ba,UAD2B,CAChB,OADgB,EAE3BC,GAF2B,CAEvBT,OAAO,CAACU,IAAR,CAAaC,GAFU,EAG3BH,UAH2B,CAGhB,SAHgB,EAI3BC,GAJ2B,CAIvBH,WAJuB,EAK3BM,GAL2B,EAA9B;AAOA,QAAMC,eAAe,GAAGN,eAAe,CAACO,IAAhB,EAAxB;;AACA,MAAI,CAACD,eAAL,EAAsB;AACpB,WAAOd,GAAG,CAACI,IAAJ,CAAS;AACdC,MAAAA,KAAK,EAAE;AACLC,QAAAA,MAAM,EAAE,IADH;AAELU,QAAAA,wBAAwB,EAAE,KAFrB;AAGLL,QAAAA,IAAI,EAAEV,OAAO,CAACU;AAHT;AADO,KAAT,CAAP;AAOD;;AAED,QAAMM,MAAM,GAAGlB,GAAG,CAACmB,KAAnB;AACA,QAAMC,WAAW,GAAGpB,GAAG,CAACqB,IAAxB;AAEA;;;;AAGA,QAAMC,WAAW,GAAG,MAAMzB,EAAE,CACzBa,UADuB,CACZ,SADY,EAEvBC,GAFuB,CAEnB,YAFmB,EAGvBD,UAHuB,CAGZ,KAHY,EAIvBa,KAJuB,CAIjB,QAJiB,EAIP,IAJO,EAIDL,MAJC,EAKvBM,IALuB,CAKlB;AACJC,IAAAA,MAAM,EAAEL,WADJ;AAEJM,IAAAA,MAAM,EAAE;AAFJ,GALkB,EASvBZ,GATuB,EAA1B;AAWA,QAAMa,eAAe,GAAG,EAAxB;AAEAL,EAAAA,WAAW,CAACM,IAAZ,CAAiBC,OAAjB,CAA0BlB,GAAD,IAAS;AAChCgB,IAAAA,eAAe,CAACG,IAAhB,CAAqB;AACnBC,MAAAA,EAAE,EAAEpB,GAAG,CAACoB,EADW;AAEnB3B,MAAAA,MAAM,EAAEO,GAAG,CAACK,IAAJ,GAAWZ,MAFA;AAGnBgB,MAAAA,WAAW,EAAE;AACXY,QAAAA,SAAS,EAAErB,GAAG,CAACK,IAAJ,GAAWI,WAAX,CAAuBY,SADvB;AAEXC,QAAAA,QAAQ,EAAEtB,GAAG,CAACK,IAAJ,GAAWI,WAAX,CAAuBa;AAFtB;AAHM,KAArB;AAQD,GATD;AAWA,SAAOhC,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE,IADH;AAELU,MAAAA,wBAAwB,EAAE,IAFrB;AAGLL,MAAAA,IAAI,EAAEV,OAAO,CAACU,IAHT;AAILU,MAAAA,WAAW,EAAEK;AAJR;AADmB,GAArB,CAAP;AAQD","sourcesContent":["import { db } from '../../lib/firebase';\nimport auth0 from '../../lib/auth0';\n\nimport getCurrentDate from '../../util/getCurrentDate';\n\nexport default async function (req, res) {\n  const session = await auth0.getSession(req);\n\n  // Verifica se o usuário está logado\n  if (!session) {\n    return res.status(401).json({\n      props: {\n        isAuth: false,\n      },\n    });\n  }\n\n  /*\n   * Verifica se o usuário já cadastrou seu status diario\n   */\n  const currentDate = getCurrentDate();\n\n  const userDailyStatus = await db\n    .collection('users')\n    .doc(session.user.sub)\n    .collection('history')\n    .doc(currentDate)\n    .get();\n\n  const todayRegistered = userDailyStatus.data();\n  if (!todayRegistered) {\n    return res.json({\n      props: {\n        isAuth: true,\n        hasRegisteredDailyStatus: false,\n        user: session.user,\n      },\n    });\n  }\n\n  const filter = req.query;\n  const coordinates = req.body;\n\n  /* Caso o usuário já tenha cadastrado seu status diário, será verificado\n   * todos os usúarios que estao proximos dele\n   */\n  const nearbyUsers = await db\n    .collection('history')\n    .doc('2020-04-20')\n    .collection('all')\n    .where('status', '==', filter)\n    .near({\n      center: coordinates,\n      radius: 10000,\n    })\n    .get();\n\n  const nearbyUsersList = [];\n\n  nearbyUsers.docs.forEach((doc) => {\n    nearbyUsersList.push({\n      id: doc.id,\n      status: doc.data().status,\n      coordinates: {\n        longitude: doc.data().coordinates.longitude,\n        latitude: doc.data().coordinates.latitude,\n      },\n    });\n  });\n\n  return res.status(200).json({\n    props: {\n      isAuth: true,\n      hasRegisteredDailyStatus: true,\n      user: session.user,\n      nearbyUsers: nearbyUsersList,\n    },\n  });\n}\n"]},"metadata":{},"sourceType":"module"}