{"ast":null,"code":"var _jsxFileName = \"/home/thiago/Documentos/Dev/Projetos/fullstack-lab/pages/app.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Router from 'next/router';\nimport AppMenu from '../components/AppMenu';\nimport Loading from '../components/Loading';\nimport Map from '../components/Map';\nimport auth0 from '../lib/auth0';\nimport getCurrentDate from '../util/getCurrentDate';\nimport { db } from '../lib/firebase';\nimport '../styles/app.css';\nexport default function App({\n  isAuth,\n  hasRegisteredDailyStatus,\n  user\n}) {\n  const {\n    0: coords,\n    1: setCoords\n  } = useState({\n    latitude: null,\n    longitude: null\n  });\n  const {\n    0: nearbyUsers,\n    1: setNearbyUsers\n  } = useState([]);\n\n  function getUserLocation() {\n    if (!navigator.geolocation) throw new Error('Your browser does not support geolocation.');\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(pos => {\n        const lat = pos.coords.latitude;\n        const long = pos.coords.longitude;\n        resolve({\n          lat,\n          long\n        });\n      });\n    });\n  }\n\n  async function getNearbUsers() {\n    const response = await axios.get('/api/nearby-users', {\n      query: {\n        latitude: coords.latitude,\n        longitude: coords.longitude,\n        filter: 'all'\n      },\n      headers: {\n        userId: user.sub\n      }\n    });\n    const {\n      data\n    } = response;\n    setNearbyUsers([1]);\n    console.log(data);\n  }\n\n  useEffect(() => {\n    if (!isAuth) Router.push('/');\n    if (!hasRegisteredDailyStatus) Router.push('/status');\n    getUserLocation(value => {\n      console.log(value);\n    }); // console.log(userLocation);\n    // getNearbUsers();\n  }, []);\n\n  if (isAuth && coords.latitude && coords.longitude) {\n    return __jsx(React.Fragment, null, __jsx(AppMenu, {\n      user: user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      className: \"app-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return __jsx(\"div\", {\n    className: \"center-content fullscreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }));\n}\nexport async function getServerSideProps({\n  req,\n  res\n}) {\n  const session = await auth0.getSession(req); // Verifica se o usuário está logado\n\n  if (!session) {\n    return {\n      props: {\n        isAuth: false\n      }\n    };\n  }\n  /*\n   * Verifica se o usuário já cadastrou seu status diario\n   */\n\n\n  const currentDate = getCurrentDate();\n  const userDailyStatus = await db.collection('users').doc(session.user.sub).collection('history').doc(currentDate).get();\n  const todayRegistered = userDailyStatus.data();\n\n  if (!todayRegistered) {\n    return {\n      props: {\n        isAuth: true,\n        hasRegisteredDailyStatus: false,\n        user: session.user\n      }\n    };\n  }\n\n  return {\n    props: {\n      isAuth: true,\n      hasRegisteredDailyStatus: true,\n      user: session.user\n    }\n  };\n}","map":{"version":3,"sources":["/home/thiago/Documentos/Dev/Projetos/fullstack-lab/pages/app.js"],"names":["React","useState","useEffect","axios","Router","AppMenu","Loading","Map","auth0","getCurrentDate","db","App","isAuth","hasRegisteredDailyStatus","user","coords","setCoords","latitude","longitude","nearbyUsers","setNearbyUsers","getUserLocation","navigator","geolocation","Error","Promise","resolve","reject","getCurrentPosition","pos","lat","long","getNearbUsers","response","get","query","filter","headers","userId","sub","data","console","log","push","value","getServerSideProps","req","res","session","getSession","props","currentDate","userDailyStatus","collection","doc","todayRegistered"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Router from 'next/router';\nimport AppMenu from '../components/AppMenu';\nimport Loading from '../components/Loading';\nimport Map from '../components/Map';\n\nimport auth0 from '../lib/auth0';\nimport getCurrentDate from '../util/getCurrentDate';\nimport { db } from '../lib/firebase';\n\nimport '../styles/app.css';\n\nexport default function App({ isAuth, hasRegisteredDailyStatus, user }) {\n  const [coords, setCoords] = useState({ latitude: null, longitude: null });\n  const [nearbyUsers, setNearbyUsers] = useState([]);\n\n  function getUserLocation() {\n    if (!navigator.geolocation)\n      throw new Error('Your browser does not support geolocation.');\n\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition((pos) => {\n        const lat = pos.coords.latitude;\n        const long = pos.coords.longitude;\n\n        resolve({ lat, long });\n      });\n    });\n  }\n\n  async function getNearbUsers() {\n    const response = await axios.get('/api/nearby-users', {\n      query: {\n        latitude: coords.latitude,\n        longitude: coords.longitude,\n        filter: 'all',\n      },\n      headers: {\n        userId: user.sub,\n      },\n    });\n\n    const { data } = response;\n    setNearbyUsers([1]);\n    console.log(data);\n  }\n\n  useEffect(() => {\n    if (!isAuth) Router.push('/');\n    if (!hasRegisteredDailyStatus) Router.push('/status');\n\n    getUserLocation((value) => {\n      console.log(value);\n    });\n    // console.log(userLocation);\n    // getNearbUsers();\n  }, []);\n\n  if (isAuth && coords.latitude && coords.longitude) {\n    return (\n      <>\n        <AppMenu user={user} />\n        <div className=\"app-container\">\n          {/* <Map\n            nearbyUsers={nearbyUsers}\n            user={user}\n            defaultCenter={{\n              lat: coords.latitude,\n              lng: coords.longitude,\n            }}\n            zoom={13}\n          /> */}\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"center-content fullscreen\">\n      <Loading />\n    </div>\n  );\n}\n\nexport async function getServerSideProps({ req, res }) {\n  const session = await auth0.getSession(req);\n\n  // Verifica se o usuário está logado\n  if (!session) {\n    return {\n      props: {\n        isAuth: false,\n      },\n    };\n  }\n\n  /*\n   * Verifica se o usuário já cadastrou seu status diario\n   */\n  const currentDate = getCurrentDate();\n\n  const userDailyStatus = await db\n    .collection('users')\n    .doc(session.user.sub)\n    .collection('history')\n    .doc(currentDate)\n    .get();\n\n  const todayRegistered = userDailyStatus.data();\n  if (!todayRegistered) {\n    return {\n      props: {\n        isAuth: true,\n        hasRegisteredDailyStatus: false,\n        user: session.user,\n      },\n    };\n  }\n\n  return {\n    props: {\n      isAuth: true,\n      hasRegisteredDailyStatus: true,\n      user: session.user,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}