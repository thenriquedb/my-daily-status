{"ast":null,"code":"import { db } from '../../lib/firebase';\nimport getCurrentDate from '../../util/getCurrentDate';\nexport default async function (req, res) {\n  const {\n    filter = 'all',\n    radius = 1000,\n    latitude,\n    longitude\n  } = req.query;\n  let nearbyUsers;\n  const currentDate = getCurrentDate();\n  console.log(latitude, currentDate, longitude, filter, radius);\n\n  switch (filter.toLowerCase()) {\n    case 'covid':\n    case 'suspect':\n      nearbyUsers = await db.collection('history').doc(currentDate).collection('all').where('status', '==', filter).near({\n        center: {\n          latitude: parseFloat(latitude),\n          longitude: parseFloat(longitude)\n        },\n        radius: parseFloat(radius) * 1000\n      }).get();\n      break;\n\n    default:\n      nearbyUsers = await db.collection('history').doc('2020-04-27').collection('all').near({\n        center: {\n          latitude: parseFloat(latitude),\n          longitude: parseFloat(longitude)\n        },\n        radius: parseFloat(radius) * 1000\n      }).get();\n      break;\n  }\n\n  const nearbyUsersList = [];\n\n  if (nearbyUsers.docs) {\n    nearbyUsers.docs.forEach(doc => {\n      nearbyUsersList.push({\n        id: doc.id,\n        status: doc.data().status,\n        coordinates: {\n          latitude: doc.data().coordinates.latitude,\n          longitude: doc.data().coordinates.longitude\n        }\n      });\n    });\n  }\n\n  return res.status(200).json({\n    nearbyUsers: nearbyUsersList.slice(1, nearbyUsersList.length - 1)\n  });\n}","map":{"version":3,"sources":["/home/thiago/Documentos/Dev/Projects/My-Dayly-Status/pages/api/nearby-users.js"],"names":["db","getCurrentDate","req","res","filter","radius","latitude","longitude","query","nearbyUsers","currentDate","console","log","toLowerCase","collection","doc","where","near","center","parseFloat","get","nearbyUsersList","docs","forEach","push","id","status","data","coordinates","json","slice","length"],"mappings":"AAAA,SAASA,EAAT,QAAmB,oBAAnB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AAEA,eAAe,gBAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AACvC,QAAM;AAAEC,IAAAA,MAAM,GAAG,KAAX;AAAkBC,IAAAA,MAAM,GAAG,IAA3B;AAAiCC,IAAAA,QAAjC;AAA2CC,IAAAA;AAA3C,MAAyDL,GAAG,CAACM,KAAnE;AAEA,MAAIC,WAAJ;AACA,QAAMC,WAAW,GAAGT,cAAc,EAAlC;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ,EAAsBI,WAAtB,EAAmCH,SAAnC,EAA8CH,MAA9C,EAAsDC,MAAtD;;AAEA,UAAQD,MAAM,CAACS,WAAP,EAAR;AACE,SAAK,OAAL;AACA,SAAK,SAAL;AACEJ,MAAAA,WAAW,GAAG,MAAMT,EAAE,CACnBc,UADiB,CACN,SADM,EAEjBC,GAFiB,CAEbL,WAFa,EAGjBI,UAHiB,CAGN,KAHM,EAIjBE,KAJiB,CAIX,QAJW,EAID,IAJC,EAIKZ,MAJL,EAKjBa,IALiB,CAKZ;AACJC,QAAAA,MAAM,EAAE;AACNZ,UAAAA,QAAQ,EAAEa,UAAU,CAACb,QAAD,CADd;AAENC,UAAAA,SAAS,EAAEY,UAAU,CAACZ,SAAD;AAFf,SADJ;AAKJF,QAAAA,MAAM,EAAEc,UAAU,CAACd,MAAD,CAAV,GAAqB;AALzB,OALY,EAYjBe,GAZiB,EAApB;AAaA;;AAEF;AACEX,MAAAA,WAAW,GAAG,MAAMT,EAAE,CACnBc,UADiB,CACN,SADM,EAEjBC,GAFiB,CAEb,YAFa,EAGjBD,UAHiB,CAGN,KAHM,EAIjBG,IAJiB,CAIZ;AACJC,QAAAA,MAAM,EAAE;AACNZ,UAAAA,QAAQ,EAAEa,UAAU,CAACb,QAAD,CADd;AAENC,UAAAA,SAAS,EAAEY,UAAU,CAACZ,SAAD;AAFf,SADJ;AAKJF,QAAAA,MAAM,EAAEc,UAAU,CAACd,MAAD,CAAV,GAAqB;AALzB,OAJY,EAWjBe,GAXiB,EAApB;AAYA;AA/BJ;;AAkCA,QAAMC,eAAe,GAAG,EAAxB;;AACA,MAAIZ,WAAW,CAACa,IAAhB,EAAsB;AACpBb,IAAAA,WAAW,CAACa,IAAZ,CAAiBC,OAAjB,CAA0BR,GAAD,IAAS;AAChCM,MAAAA,eAAe,CAACG,IAAhB,CAAqB;AACnBC,QAAAA,EAAE,EAAEV,GAAG,CAACU,EADW;AAEnBC,QAAAA,MAAM,EAAEX,GAAG,CAACY,IAAJ,GAAWD,MAFA;AAGnBE,QAAAA,WAAW,EAAE;AACXtB,UAAAA,QAAQ,EAAES,GAAG,CAACY,IAAJ,GAAWC,WAAX,CAAuBtB,QADtB;AAEXC,UAAAA,SAAS,EAAEQ,GAAG,CAACY,IAAJ,GAAWC,WAAX,CAAuBrB;AAFvB;AAHM,OAArB;AAQD,KATD;AAUD;;AACD,SAAOJ,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB;AAC1BpB,IAAAA,WAAW,EAAEY,eAAe,CAACS,KAAhB,CAAsB,CAAtB,EAAyBT,eAAe,CAACU,MAAhB,GAAyB,CAAlD;AADa,GAArB,CAAP;AAGD","sourcesContent":["import { db } from '../../lib/firebase';\nimport getCurrentDate from '../../util/getCurrentDate';\n\nexport default async function (req, res) {\n  const { filter = 'all', radius = 1000, latitude, longitude } = req.query;\n\n  let nearbyUsers;\n  const currentDate = getCurrentDate();\n  console.log(latitude, currentDate, longitude, filter, radius);\n\n  switch (filter.toLowerCase()) {\n    case 'covid':\n    case 'suspect':\n      nearbyUsers = await db\n        .collection('history')\n        .doc(currentDate)\n        .collection('all')\n        .where('status', '==', filter)\n        .near({\n          center: {\n            latitude: parseFloat(latitude),\n            longitude: parseFloat(longitude),\n          },\n          radius: parseFloat(radius) * 1000,\n        })\n        .get();\n      break;\n\n    default:\n      nearbyUsers = await db\n        .collection('history')\n        .doc('2020-04-27')\n        .collection('all')\n        .near({\n          center: {\n            latitude: parseFloat(latitude),\n            longitude: parseFloat(longitude),\n          },\n          radius: parseFloat(radius) * 1000,\n        })\n        .get();\n      break;\n  }\n\n  const nearbyUsersList = [];\n  if (nearbyUsers.docs) {\n    nearbyUsers.docs.forEach((doc) => {\n      nearbyUsersList.push({\n        id: doc.id,\n        status: doc.data().status,\n        coordinates: {\n          latitude: doc.data().coordinates.latitude,\n          longitude: doc.data().coordinates.longitude,\n        },\n      });\n    });\n  }\n  return res.status(200).json({\n    nearbyUsers: nearbyUsersList.slice(1, nearbyUsersList.length - 1),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}