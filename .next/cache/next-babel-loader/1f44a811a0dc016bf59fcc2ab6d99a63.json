{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/home/thiago/Documentos/Dev/Projetos/fullstack-lab/pages/app.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Router from 'next/router';\nimport Swal from 'sweetalert2';\nimport AppMenu from '../components/AppMenu';\nimport Loading from '../components/Loading';\nimport Map from '../components/Map';\nimport '../styles/app.css';\nexport var __N_SSP = true;\nexport default function App(_ref) {\n  var isAuth = _ref.isAuth,\n      hasRegisteredDailyStatus = _ref.hasRegisteredDailyStatus,\n      user = _ref.user;\n\n  var _useState = useState({\n    latitude: null,\n    longitude: null\n  }),\n      coords = _useState[0],\n      setCoords = _useState[1];\n\n  var _useState2 = useState([]),\n      nearbyUsers = _useState2[0],\n      setNearbyUsers = _useState2[1];\n\n  function getUserLocation() {\n    if (navigator.geolocation) {\n      Swal.fire({\n        title: 'Erro',\n        text: 'Seu navegador não possui suporte a geolocalização. Utilize outro navegador para continuar utilizando o My Daily Status',\n        icon: 'error',\n        confirmButtonColor: '#961d66'\n      }); // Router.push('/');\n    }\n\n    navigator.geolocation.getCurrentPosition(function (position) {\n      var _position$coords = position.coords,\n          latitude = _position$coords.latitude,\n          longitude = _position$coords.longitude;\n      setCoords({\n        latitude: latitude,\n        longitude: longitude\n      });\n    }, function (err) {\n      console.log(err);\n    }, {\n      timeout: 10000\n    });\n  }\n\n  function getNearbUsers() {\n    var response, data;\n    return _regeneratorRuntime.async(function getNearbUsers$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios.get(\"/api/nearby-users\", {\n              params: {\n                latitude: coords.latitude,\n                longitude: coords.longitude,\n                filter: 'all'\n              },\n              headers: {\n                userId: user.sub\n              }\n            }));\n\n          case 2:\n            response = _context.sent;\n            data = response.data;\n            setNearbyUsers(data.nearbyUsers);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    if (!isAuth) Router.push('/');\n    if (!hasRegisteredDailyStatus) Router.push('/status');\n    getUserLocation();\n  }, []);\n  useEffect(function () {\n    getNearbUsers();\n  }, [coords]);\n\n  if (isAuth && coords.latitude && coords.longitude) {\n    return __jsx(React.Fragment, null, __jsx(AppMenu, {\n      user: user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      className: \"app-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, __jsx(Map, {\n      nearbyUsers: nearbyUsers,\n      user: user,\n      defaultCenter: {\n        lat: coords.latitude,\n        lng: coords.longitude\n      },\n      zoom: 13,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  return __jsx(\"div\", {\n    className: \"center-content fullscreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/thiago/Documentos/Dev/Projetos/fullstack-lab/pages/app.js"],"names":["React","useState","useEffect","axios","Router","Swal","AppMenu","Loading","Map","App","isAuth","hasRegisteredDailyStatus","user","latitude","longitude","coords","setCoords","nearbyUsers","setNearbyUsers","getUserLocation","navigator","geolocation","fire","title","text","icon","confirmButtonColor","getCurrentPosition","position","err","console","log","timeout","getNearbUsers","get","params","filter","headers","userId","sub","response","data","push","lat","lng"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Router from 'next/router';\nimport Swal from 'sweetalert2';\n\nimport AppMenu from '../components/AppMenu';\nimport Loading from '../components/Loading';\nimport Map from '../components/Map';\n\nimport auth0 from '../lib/auth0';\nimport getCurrentDate from '../util/getCurrentDate';\nimport { db } from '../lib/firebase';\n\nimport '../styles/app.css';\n\nexport default function App({ isAuth, hasRegisteredDailyStatus, user }) {\n  const [coords, setCoords] = useState({ latitude: null, longitude: null });\n  const [nearbyUsers, setNearbyUsers] = useState([]);\n\n  function getUserLocation() {\n    if (navigator.geolocation) {\n      Swal.fire({\n        title: 'Erro',\n        text:\n          'Seu navegador não possui suporte a geolocalização. Utilize outro navegador para continuar utilizando o My Daily Status',\n        icon: 'error',\n        confirmButtonColor: '#961d66',\n      }); // Router.push('/');\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const { latitude, longitude } = position.coords;\n        setCoords({ latitude, longitude });\n      },\n      (err) => {\n        console.log(err);\n      },\n      { timeout: 10000 }\n    );\n  }\n\n  async function getNearbUsers() {\n    const response = await axios.get(`/api/nearby-users`, {\n      params: {\n        latitude: coords.latitude,\n        longitude: coords.longitude,\n        filter: 'all',\n      },\n      headers: {\n        userId: user.sub,\n      },\n    });\n\n    const { data } = response;\n    setNearbyUsers(data.nearbyUsers);\n  }\n\n  useEffect(() => {\n    if (!isAuth) Router.push('/');\n    if (!hasRegisteredDailyStatus) Router.push('/status');\n\n    getUserLocation();\n  }, []);\n\n  useEffect(() => {\n    getNearbUsers();\n  }, [coords]);\n\n  if (isAuth && coords.latitude && coords.longitude) {\n    return (\n      <>\n        <AppMenu user={user} />\n\n        <div className=\"app-container\">\n          <Map\n            nearbyUsers={nearbyUsers}\n            user={user}\n            defaultCenter={{\n              lat: coords.latitude,\n              lng: coords.longitude,\n            }}\n            zoom={13}\n          />\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"center-content fullscreen\">\n      <Loading />\n    </div>\n  );\n}\n\nexport async function getServerSideProps({ req, res }) {\n  const session = await auth0.getSession(req);\n\n  // Verifica se o usuário está logado\n  if (!session) {\n    return {\n      props: {\n        isAuth: false,\n      },\n    };\n  }\n\n  /*\n   * Verifica se o usuário já cadastrou seu status diario\n   */\n  const currentDate = getCurrentDate();\n\n  const userDailyStatus = await db\n    .collection('users')\n    .doc(session.user.sub)\n    .collection('history')\n    .doc(currentDate)\n    .get();\n\n  const todayRegistered = userDailyStatus.data();\n  if (!todayRegistered) {\n    return {\n      props: {\n        isAuth: true,\n        hasRegisteredDailyStatus: false,\n        user: session.user,\n      },\n    };\n  }\n\n  return {\n    props: {\n      isAuth: true,\n      hasRegisteredDailyStatus: true,\n      user: session.user,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}