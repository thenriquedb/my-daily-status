{"ast":null,"code":"var _jsxFileName = \"/home/thiago/Documentos/Dev/Projetos/fullstack-lab/pages/app.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Router from 'next/router';\nimport AppMenu from '../components/AppMenu';\nimport Loading from '../components/Loading';\nimport Map from '../components/Map';\nimport auth0 from '../lib/auth0';\nimport getCurrentDate from '../util/getCurrentDate';\nimport { db } from '../lib/firebase';\nimport '../styles/app.css';\nexport default function App({\n  isAuth,\n  hasRegisteredDailyStatus,\n  user\n}) {\n  const {\n    0: coords,\n    1: setCoords\n  } = useState({\n    latitude: null,\n    longitude: null\n  });\n  const {\n    0: nearbyUsers,\n    1: setNearbyUsers\n  } = useState([]);\n\n  function getUserLocation() {\n    console.log('getuserlocaion');\n\n    if (!navigator.geolocation) {\n      alert('Seu navegador não possui suporte a geolocalização');\n      Router.push('/');\n    }\n\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      console.log('position: ', position.coords);\n      setCoords({\n        latitude,\n        longitude\n      });\n    }, err => {\n      console.log(err);\n    }, {\n      timeout: 15000\n    });\n  }\n\n  async function getNearbUsers() {\n    const response = await axios.get(`/api/nearby-users?latitude=${coords.latitude}&longitude=${coords.longitude}&filter=${'all'}`, {\n      // query: {\n      //   latitude: coords.latitude,\n      //   longitude: coords.longitude,\n      //   filter: 'all',\n      // },\n      headers: {\n        userId: user.sub\n      }\n    });\n    const {\n      data\n    } = response;\n    console.log('data: ', data);\n  }\n\n  useEffect(() => {\n    if (!isAuth) Router.push('/');\n    if (!hasRegisteredDailyStatus) Router.push('/status');\n    getUserLocation();\n  }, []);\n  useEffect(() => {\n    getNearbUsers();\n  }, [coords]);\n\n  if (isAuth && coords.latitude && coords.longitude) {\n    return __jsx(React.Fragment, null, __jsx(AppMenu, {\n      user: user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      className: \"app-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, coords.latitude && coords.longitude && __jsx(Map, {\n      nearbyUsers: nearbyUsers,\n      user: user,\n      defaultCenter: {\n        lat: coords.latitude,\n        lng: coords.longitude\n      },\n      zoom: 13,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    })));\n  }\n\n  return __jsx(\"div\", {\n    className: \"center-content fullscreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }));\n}\nexport async function getServerSideProps({\n  req,\n  res\n}) {\n  const session = await auth0.getSession(req); // Verifica se o usuário está logado\n\n  if (!session) {\n    return {\n      props: {\n        isAuth: false\n      }\n    };\n  }\n  /*\n   * Verifica se o usuário já cadastrou seu status diario\n   */\n\n\n  const currentDate = getCurrentDate();\n  const userDailyStatus = await db.collection('users').doc(session.user.sub).collection('history').doc(currentDate).get();\n  const todayRegistered = userDailyStatus.data();\n\n  if (!todayRegistered) {\n    return {\n      props: {\n        isAuth: true,\n        hasRegisteredDailyStatus: false,\n        user: session.user\n      }\n    };\n  }\n\n  return {\n    props: {\n      isAuth: true,\n      hasRegisteredDailyStatus: true,\n      user: session.user\n    }\n  };\n}","map":{"version":3,"sources":["/home/thiago/Documentos/Dev/Projetos/fullstack-lab/pages/app.js"],"names":["React","useState","useEffect","axios","Router","AppMenu","Loading","Map","auth0","getCurrentDate","db","App","isAuth","hasRegisteredDailyStatus","user","coords","setCoords","latitude","longitude","nearbyUsers","setNearbyUsers","getUserLocation","console","log","navigator","geolocation","alert","push","getCurrentPosition","position","err","timeout","getNearbUsers","response","get","headers","userId","sub","data","lat","lng","getServerSideProps","req","res","session","getSession","props","currentDate","userDailyStatus","collection","doc","todayRegistered"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Router from 'next/router';\nimport AppMenu from '../components/AppMenu';\nimport Loading from '../components/Loading';\nimport Map from '../components/Map';\n\nimport auth0 from '../lib/auth0';\nimport getCurrentDate from '../util/getCurrentDate';\nimport { db } from '../lib/firebase';\n\nimport '../styles/app.css';\n\nexport default function App({ isAuth, hasRegisteredDailyStatus, user }) {\n  const [coords, setCoords] = useState({ latitude: null, longitude: null });\n  const [nearbyUsers, setNearbyUsers] = useState([]);\n\n  function getUserLocation() {\n    console.log('getuserlocaion');\n    if (!navigator.geolocation) {\n      alert('Seu navegador não possui suporte a geolocalização');\n      Router.push('/');\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const { latitude, longitude } = position.coords;\n        console.log('position: ', position.coords);\n        setCoords({ latitude, longitude });\n      },\n      (err) => {\n        console.log(err);\n      },\n      { timeout: 15000 }\n    );\n  }\n\n  async function getNearbUsers() {\n    const response = await axios.get(\n      `/api/nearby-users?latitude=${coords.latitude}&longitude=${\n      coords.longitude\n      }&filter=${'all'}`,\n      {\n        // query: {\n        //   latitude: coords.latitude,\n        //   longitude: coords.longitude,\n        //   filter: 'all',\n        // },\n        headers: {\n          userId: user.sub,\n        },\n      }\n    );\n\n    const { data } = response;\n    console.log('data: ', data);\n  }\n\n  useEffect(() => {\n    if (!isAuth) Router.push('/');\n    if (!hasRegisteredDailyStatus) Router.push('/status');\n\n    getUserLocation();\n  }, []);\n\n  useEffect(() => {\n    getNearbUsers();\n  }, [coords]);\n\n  if (isAuth && coords.latitude && coords.longitude) {\n    return (\n      <>\n        <AppMenu user={user} />\n        <div className=\"app-container\">\n          {coords.latitude && coords.longitude && (\n            <Map\n              nearbyUsers={nearbyUsers}\n              user={user}\n              defaultCenter={{\n                lat: coords.latitude,\n                lng: coords.longitude,\n              }}\n              zoom={13}\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"center-content fullscreen\">\n      <Loading />\n    </div>\n  );\n}\n\nexport async function getServerSideProps({ req, res }) {\n  const session = await auth0.getSession(req);\n\n  // Verifica se o usuário está logado\n  if (!session) {\n    return {\n      props: {\n        isAuth: false,\n      },\n    };\n  }\n\n  /*\n   * Verifica se o usuário já cadastrou seu status diario\n   */\n  const currentDate = getCurrentDate();\n\n  const userDailyStatus = await db\n    .collection('users')\n    .doc(session.user.sub)\n    .collection('history')\n    .doc(currentDate)\n    .get();\n\n  const todayRegistered = userDailyStatus.data();\n  if (!todayRegistered) {\n    return {\n      props: {\n        isAuth: true,\n        hasRegisteredDailyStatus: false,\n        user: session.user,\n      },\n    };\n  }\n\n  return {\n    props: {\n      isAuth: true,\n      hasRegisteredDailyStatus: true,\n      user: session.user,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}