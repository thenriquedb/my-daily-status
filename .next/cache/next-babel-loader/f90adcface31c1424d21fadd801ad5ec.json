{"ast":null,"code":"var _jsxFileName = \"/home/thiago/Documentos/Dev/Projetos/fullstack-lab/pages/app.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Router from 'next/router';\nimport Swal from 'sweetalert2';\nimport AppMenu from '../components/AppMenu';\nimport Loading from '../components/Loading';\nimport Map from '../components/Map';\nimport auth0 from '../lib/auth0';\nimport getCurrentDate from '../util/getCurrentDate';\nimport { db } from '../lib/firebase';\nimport '../styles/app.css';\nexport default function App({\n  isAuth,\n  hasRegisteredDailyStatus,\n  user\n}) {\n  const {\n    0: coords,\n    1: setCoords\n  } = useState({\n    latitude: null,\n    longitude: null\n  });\n  const {\n    0: nearbyUsers,\n    1: setNearbyUsers\n  } = useState([]);\n\n  function getUserLocation() {\n    if (navigator.geolocation) {\n      Swal.fire({\n        title: 'Erro',\n        text: 'Seu navegador não possui suporte a geolocalização. Utilize outro navegador para continuar utilizando o My Daily Status',\n        icon: 'error',\n        confirmButtonColor: '#961d66'\n      }).then(result => {\n        console.log(result);\n      }); // Router.push('/');\n    }\n\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      setCoords({\n        latitude,\n        longitude\n      });\n    }, err => {\n      console.log(err);\n    }, {\n      timeout: 10000\n    });\n  }\n\n  async function getNearbUsers() {\n    const response = await axios.get(`/api/nearby-users`, {\n      params: {\n        latitude: coords.latitude,\n        longitude: coords.longitude,\n        filter: 'all'\n      },\n      headers: {\n        userId: user.sub\n      }\n    });\n    const {\n      data\n    } = response;\n    setNearbyUsers(data.nearbyUsers);\n  }\n\n  useEffect(() => {\n    if (!isAuth) Router.push('/');\n    if (!hasRegisteredDailyStatus) Router.push('/status');\n    getUserLocation();\n  }, []);\n  useEffect(() => {\n    getNearbUsers();\n  }, [coords]);\n\n  if (isAuth && coords.latitude && coords.longitude) {\n    return __jsx(React.Fragment, null, __jsx(AppMenu, {\n      user: user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      className: \"app-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, __jsx(Map, {\n      nearbyUsers: nearbyUsers,\n      user: user,\n      defaultCenter: {\n        lat: coords.latitude,\n        lng: coords.longitude\n      },\n      zoom: 13,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  return __jsx(\"div\", {\n    className: \"center-content fullscreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }));\n}\nexport async function getServerSideProps({\n  req,\n  res\n}) {\n  const session = await auth0.getSession(req); // Verifica se o usuário está logado\n\n  if (!session) {\n    return {\n      props: {\n        isAuth: false\n      }\n    };\n  }\n  /*\n   * Verifica se o usuário já cadastrou seu status diario\n   */\n\n\n  const currentDate = getCurrentDate();\n  const userDailyStatus = await db.collection('users').doc(session.user.sub).collection('history').doc(currentDate).get();\n  const todayRegistered = userDailyStatus.data();\n\n  if (!todayRegistered) {\n    return {\n      props: {\n        isAuth: true,\n        hasRegisteredDailyStatus: false,\n        user: session.user\n      }\n    };\n  }\n\n  return {\n    props: {\n      isAuth: true,\n      hasRegisteredDailyStatus: true,\n      user: session.user\n    }\n  };\n}","map":{"version":3,"sources":["/home/thiago/Documentos/Dev/Projetos/fullstack-lab/pages/app.js"],"names":["React","useState","useEffect","axios","Router","Swal","AppMenu","Loading","Map","auth0","getCurrentDate","db","App","isAuth","hasRegisteredDailyStatus","user","coords","setCoords","latitude","longitude","nearbyUsers","setNearbyUsers","getUserLocation","navigator","geolocation","fire","title","text","icon","confirmButtonColor","then","result","console","log","getCurrentPosition","position","err","timeout","getNearbUsers","response","get","params","filter","headers","userId","sub","data","push","lat","lng","getServerSideProps","req","res","session","getSession","props","currentDate","userDailyStatus","collection","doc","todayRegistered"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Router from 'next/router';\nimport Swal from 'sweetalert2';\n\nimport AppMenu from '../components/AppMenu';\nimport Loading from '../components/Loading';\nimport Map from '../components/Map';\n\nimport auth0 from '../lib/auth0';\nimport getCurrentDate from '../util/getCurrentDate';\nimport { db } from '../lib/firebase';\n\nimport '../styles/app.css';\n\nexport default function App({ isAuth, hasRegisteredDailyStatus, user }) {\n  const [coords, setCoords] = useState({ latitude: null, longitude: null });\n  const [nearbyUsers, setNearbyUsers] = useState([]);\n\n  function getUserLocation() {\n    if (navigator.geolocation) {\n      Swal.fire({\n        title: 'Erro',\n        text:\n          'Seu navegador não possui suporte a geolocalização. Utilize outro navegador para continuar utilizando o My Daily Status',\n        icon: 'error',\n        confirmButtonColor: '#961d66',\n      }).then((result) => {\n        console.log(result);\n      });\n      // Router.push('/');\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const { latitude, longitude } = position.coords;\n        setCoords({ latitude, longitude });\n      },\n      (err) => {\n        console.log(err);\n      },\n      { timeout: 10000 }\n    );\n  }\n\n  async function getNearbUsers() {\n    const response = await axios.get(`/api/nearby-users`, {\n      params: {\n        latitude: coords.latitude,\n        longitude: coords.longitude,\n        filter: 'all',\n      },\n      headers: {\n        userId: user.sub,\n      },\n    });\n\n    const { data } = response;\n    setNearbyUsers(data.nearbyUsers);\n  }\n\n  useEffect(() => {\n    if (!isAuth) Router.push('/');\n    if (!hasRegisteredDailyStatus) Router.push('/status');\n\n    getUserLocation();\n  }, []);\n\n  useEffect(() => {\n    getNearbUsers();\n  }, [coords]);\n\n  if (isAuth && coords.latitude && coords.longitude) {\n    return (\n      <>\n        <AppMenu user={user} />\n\n        <div className=\"app-container\">\n          <Map\n            nearbyUsers={nearbyUsers}\n            user={user}\n            defaultCenter={{\n              lat: coords.latitude,\n              lng: coords.longitude,\n            }}\n            zoom={13}\n          />\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"center-content fullscreen\">\n      <Loading />\n    </div>\n  );\n}\n\nexport async function getServerSideProps({ req, res }) {\n  const session = await auth0.getSession(req);\n\n  // Verifica se o usuário está logado\n  if (!session) {\n    return {\n      props: {\n        isAuth: false,\n      },\n    };\n  }\n\n  /*\n   * Verifica se o usuário já cadastrou seu status diario\n   */\n  const currentDate = getCurrentDate();\n\n  const userDailyStatus = await db\n    .collection('users')\n    .doc(session.user.sub)\n    .collection('history')\n    .doc(currentDate)\n    .get();\n\n  const todayRegistered = userDailyStatus.data();\n  if (!todayRegistered) {\n    return {\n      props: {\n        isAuth: true,\n        hasRegisteredDailyStatus: false,\n        user: session.user,\n      },\n    };\n  }\n\n  return {\n    props: {\n      isAuth: true,\n      hasRegisteredDailyStatus: true,\n      user: session.user,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}