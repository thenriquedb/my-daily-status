{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Head from 'next/head';\nimport Router from 'next/router';\nimport Swal from 'sweetalert2';\nimport { FaCompass, FaSearch } from 'react-icons/fa';\nimport AppMenu from '../components/AppMenu';\nimport Loading from '../components/Loading';\nimport Map from '../components/Map';\nimport VirusSvg from '../public/assets/icons/virus.svg';\nimport auth0 from '../lib/auth0';\nimport getCurrentDate from '../util/getCurrentDate';\nimport { db } from '../lib/firebase';\nimport '../styles/app.css';\nexport default function App({\n  isAuth,\n  hasRegisteredDailyStatus,\n  user\n}) {\n  const {\n    0: coords,\n    1: setCoords\n  } = useState({\n    latitude: null,\n    longitude: null\n  });\n  const {\n    0: radius,\n    1: setRadius\n  } = useState(10);\n  const {\n    0: filter,\n    1: setFilter\n  } = useState('all');\n  const {\n    0: nearbyUsers,\n    1: setNearbyUsers\n  } = useState([]);\n\n  function getUserLocation() {\n    if (!navigator.geolocation) {\n      Swal.fire({\n        title: 'Erro',\n        text: 'Seu navegador não possui suporte a geolocalização. Utilize outro navegador para continuar utilizando o My Daily Status',\n        icon: 'error',\n        confirmButtonColor: '#961d66'\n      }).then(result => {\n        if (result) Router.push('/');\n      });\n    }\n\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      setCoords({\n        latitude,\n        longitude\n      });\n    }, err => {\n      Swal.fire({\n        title: 'Erro',\n        text: 'Erro ao tentar sua localização. Recarregue a pagina para tentar novamente.',\n        icon: 'error',\n        confirmButtonColor: '#961d66'\n      }).then(result => {\n        document.location.reload(true);\n      });\n    }, {\n      timeout: 10000\n    });\n  }\n\n  async function getNearbUsers() {\n    const response = await axios.get('/api/nearby-users', {\n      params: {\n        latitude: parseFloat(coords.latitude),\n        longitude: parseFloat(coords.longitude),\n        filter,\n        radius: parseFloat(radius)\n      },\n      headers: {\n        userId: user.sub\n      }\n    });\n    const {\n      data\n    } = response;\n    setNearbyUsers(data.nearbyUsers);\n  }\n\n  useEffect(() => {\n    if (!isAuth) {\n      Router.push('/');\n      return;\n    }\n\n    if (!hasRegisteredDailyStatus) {\n      Router.push('/status');\n      return;\n    }\n\n    getUserLocation();\n  }, []);\n  useEffect(() => {\n    if (coords.latitude && coords.longitude) getNearbUsers();\n  }, [coords]);\n\n  if (isAuth && coords.latitude && coords.longitude) {\n    return __jsx(React.Fragment, null, __jsx(AppMenu, {\n      user: user\n    }), __jsx(Head, null, __jsx(\"title\", null, \"My Dayly Status \"), __jsx(\"meta\", {\n      property: \"og:title\",\n      content: \"My page title\",\n      key: \"title\"\n    })), __jsx(\"div\", {\n      className: \"app-container\"\n    }, __jsx(Map, {\n      nearbyUsers: nearbyUsers,\n      user: user,\n      defaultCenter: {\n        lat: coords.latitude,\n        lng: coords.longitude\n      },\n      zoom: 13\n    }), __jsx(\"div\", {\n      className: \"filter-bar\"\n    }, __jsx(\"div\", {\n      className: \"input-container\"\n    }, __jsx(\"div\", {\n      className: \"icon\"\n    }, __jsx(FaCompass, {\n      color: \"#fff\",\n      size: 24\n    })), __jsx(\"input\", {\n      value: radius,\n      type: \"number\",\n      onChange: e => setRadius(e.target.value),\n      placeholder: \"Raio de busca (KM)\"\n    }), __jsx(\"p\", null, \"KM\")), __jsx(\"div\", {\n      className: \"select-container\"\n    }, __jsx(\"div\", {\n      className: \"icon\"\n    }, __jsx(VirusSvg, {\n      fill: \"#fff\"\n    })), __jsx(\"select\", {\n      onChange: e => setFilter(e.target.value),\n      value: filter\n    }, __jsx(\"option\", {\n      value: \"covid\"\n    }, \"Covid\"), __jsx(\"option\", {\n      value: \"suspect\"\n    }, \"Suspeitos\"), __jsx(\"option\", {\n      value: \"all\"\n    }, \"Todos as pessoas\"))), __jsx(\"button\", {\n      type: \"button\",\n      onClick: () => getNearbUsers(),\n      className: \"search-button\"\n    }, __jsx(FaSearch, {\n      color: \"#fff\",\n      size: 18\n    })))));\n  }\n\n  return __jsx(\"div\", {\n    className: \"center-content fullscreen\"\n  }, __jsx(Loading, null));\n}\nexport async function getServerSideProps({\n  req,\n  res\n}) {\n  const session = await auth0.getSession(req); // Verifica se o usuário está logado\n\n  if (!session) {\n    return {\n      props: {\n        isAuth: false\n      }\n    };\n  }\n  /*\n   * Verifica se o usuário já cadastrou seu status diario\n   */\n\n\n  const currentDate = getCurrentDate();\n  const userDailyStatus = await db.collection('users').doc(session.user.sub).collection('history').doc(currentDate).get();\n  const todayRegistered = userDailyStatus.data();\n\n  if (!todayRegistered) {\n    return {\n      props: {\n        isAuth: true,\n        hasRegisteredDailyStatus: false,\n        user: session.user\n      }\n    };\n  }\n\n  return {\n    props: {\n      isAuth: true,\n      hasRegisteredDailyStatus: true,\n      user: session.user\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}