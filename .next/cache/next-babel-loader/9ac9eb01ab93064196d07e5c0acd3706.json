{"ast":null,"code":"var _jsxFileName = \"/home/thiago/Documentos/Dev/Projetos/fullstack-lab/pages/app.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport Router from 'next/router';\nimport AppMenu from '../components/AppMenu';\nimport Loading from '../components/Loading';\nimport '../styles/app.css';\nexport var __N_SSP = true;\nexport default function App(_ref) {\n  var isAuth = _ref.isAuth,\n      hasRegisteredStatusToday = _ref.hasRegisteredStatusToday,\n      user = _ref.user;\n  useEffect(function () {\n    if (!isAuth) Router.push('/');\n    if (!hasRegisteredStatusToday) Router.push('/status');\n  }, [isAuth]);\n\n  if (isAuth) {\n    return __jsx(\"div\", {\n      className: \"app-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    }, __jsx(AppMenu, {\n      user: user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return __jsx(\"div\", {\n    className: \"center-content fullscreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }));\n} // Processa o que tem de processar no servidor e manda para a pagina\n// Funcina como uma API porém com tela","map":{"version":3,"sources":["/home/thiago/Documentos/Dev/Projetos/fullstack-lab/pages/app.js"],"names":["React","useEffect","Router","AppMenu","Loading","App","isAuth","hasRegisteredStatusToday","user","push"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAMA,OAAO,mBAAP;;AAEA,eAAe,SAASC,GAAT,OAAyD;AAAA,MAA1CC,MAA0C,QAA1CA,MAA0C;AAAA,MAAlCC,wBAAkC,QAAlCA,wBAAkC;AAAA,MAARC,IAAQ,QAARA,IAAQ;AACtEP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACK,MAAL,EAAaJ,MAAM,CAACO,IAAP,CAAY,GAAZ;AACb,QAAI,CAACF,wBAAL,EAA+BL,MAAM,CAACO,IAAP,CAAY,SAAZ;AAChC,GAHQ,EAGN,CAACH,MAAD,CAHM,CAAT;;AAKA,MAAIA,MAAJ,EAAY;AACV,WACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,OAAD;AAAS,MAAA,IAAI,EAAEE,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AACD,SACE;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,C,CAED;AACA","sourcesContent":["import React, { useEffect } from 'react';\nimport Router from 'next/router';\nimport AppMenu from '../components/AppMenu';\nimport Loading from '../components/Loading';\n\nimport auth0 from '../lib/auth0';\nimport getCurrentDate from '../util/getCurrentDate';\nimport { db } from '../lib/firebase';\n\nimport '../styles/app.css';\n\nexport default function App({ isAuth, hasRegisteredStatusToday, user }) {\n  useEffect(() => {\n    if (!isAuth) Router.push('/');\n    if (!hasRegisteredStatusToday) Router.push('/status');\n  }, [isAuth]);\n\n  if (isAuth) {\n    return (\n      <div className=\"app-container\">\n        <AppMenu user={user} />\n      </div>\n    );\n  }\n  return (\n    <div className=\"center-content fullscreen\">\n      <Loading />\n    </div>\n  );\n}\n\n// Processa o que tem de processar no servidor e manda para a pagina\n// Funcina como uma API porém com tela\nexport async function getServerSideProps({ req, res }) {\n  const session = await auth0.getSession(req);\n\n  if (session) {\n    req.user = session.user;\n    const currentDate = getCurrentDate();\n\n    const todaysCheckin = await db\n      .collection('markers')\n      .doc(currentDate)\n      .collection('checks')\n      .doc(session.user.sub)\n      .get();\n\n    const todayRegistered = todaysCheckin.data();\n    const hasRegisteredStatusToday = !!todayRegistered;\n\n    if (todayRegistered) {\n      const { coordinates } = todayRegistered;\n\n      const checkins = await db\n        .collection('markers')\n        .doc(currentDate)\n        .collection('checks')\n        .near({\n          center: coordinates,\n          radius: 1000,\n        })\n        .get();\n\n      checkins.docs.forEach((doc) => {\n        console.log(doc);\n      });\n\n      return {\n        props: {\n          isAuth: true,\n          hasRegisteredStatusToday,\n          user: session.user,\n        },\n      };\n    }\n  }\n\n  return {\n    props: {\n      isAuth: false,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}