{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/home/thiago/Documentos/Dev/Projetos/fullstack-lab/pages/app.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Router from 'next/router';\nimport AppMenu from '../components/AppMenu';\nimport Loading from '../components/Loading';\nimport Map from '../components/Map';\nimport '../styles/app.css';\nexport var __N_SSP = true;\nexport default function App(_ref) {\n  var isAuth = _ref.isAuth,\n      hasRegisteredDailyStatus = _ref.hasRegisteredDailyStatus,\n      user = _ref.user;\n\n  var _useState = useState({\n    latitude: null,\n    longitude: null\n  }),\n      coords = _useState[0],\n      setCoords = _useState[1];\n\n  function getUserLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        var _position$coords = position.coords,\n            latitude = _position$coords.latitude,\n            longitude = _position$coords.longitude;\n        setCoords({\n          latitude: latitude,\n          longitude: longitude\n        });\n      });\n    } else {\n      alert('Seu navegador não possui suporte a geolocalização');\n      Router.push('/');\n    }\n  }\n\n  useEffect(function _callee() {\n    var response, data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!isAuth) Router.push('/');\n            if (!hasRegisteredDailyStatus) Router.push('/status');\n            getUserLocation();\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(axios.get('/api/nearby-users', {\n              query: {\n                latitude: coords.latitude,\n                longitude: coords.longitude,\n                filter: 'all'\n              },\n              headers: {\n                userId: user.sub\n              }\n            }));\n\n          case 5:\n            response = _context.sent;\n            data = response.data;\n            return _context.abrupt(\"return\", 'ok');\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n\n  if (isAuth && coords.latitude && coords.longitude) {\n    return __jsx(React.Fragment, null, __jsx(AppMenu, {\n      user: user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      className: \"app-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return __jsx(\"div\", {\n    className: \"center-content fullscreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/thiago/Documentos/Dev/Projetos/fullstack-lab/pages/app.js"],"names":["React","useState","useEffect","axios","Router","AppMenu","Loading","Map","App","isAuth","hasRegisteredDailyStatus","user","latitude","longitude","coords","setCoords","getUserLocation","navigator","geolocation","getCurrentPosition","position","alert","push","get","query","filter","headers","userId","sub","response","data"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AAMA,OAAO,mBAAP;;AAEA,eAAe,SAASC,GAAT,OAAyD;AAAA,MAA1CC,MAA0C,QAA1CA,MAA0C;AAAA,MAAlCC,wBAAkC,QAAlCA,wBAAkC;AAAA,MAARC,IAAQ,QAARA,IAAQ;;AAAA,kBAC1CV,QAAQ,CAAC;AAAEW,IAAAA,QAAQ,EAAE,IAAZ;AAAkBC,IAAAA,SAAS,EAAE;AAA7B,GAAD,CADkC;AAAA,MAC/DC,MAD+D;AAAA,MACvDC,SADuD;;AAGtE,WAASC,eAAT,GAA2B;AACzB,QAAIC,SAAS,CAACC,WAAd,EAA2B;AACzBD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACC,QAAD,EAAc;AAAA,+BACrBA,QAAQ,CAACN,MADY;AAAA,YAC7CF,QAD6C,oBAC7CA,QAD6C;AAAA,YACnCC,SADmC,oBACnCA,SADmC;AAErDE,QAAAA,SAAS,CAAC;AAAEH,UAAAA,QAAQ,EAARA,QAAF;AAAYC,UAAAA,SAAS,EAATA;AAAZ,SAAD,CAAT;AACD,OAHD;AAID,KALD,MAKO;AACLQ,MAAAA,KAAK,CAAC,mDAAD,CAAL;AACAjB,MAAAA,MAAM,CAACkB,IAAP,CAAY,GAAZ;AACD;AACF;;AAEDpB,EAAAA,SAAS,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACR,gBAAI,CAACO,MAAL,EAAaL,MAAM,CAACkB,IAAP,CAAY,GAAZ;AACb,gBAAI,CAACZ,wBAAL,EAA+BN,MAAM,CAACkB,IAAP,CAAY,SAAZ;AAE/BN,YAAAA,eAAe;AAJP;AAAA,6CAMeb,KAAK,CAACoB,GAAN,CAAU,mBAAV,EAA+B;AACpDC,cAAAA,KAAK,EAAE;AACLZ,gBAAAA,QAAQ,EAAEE,MAAM,CAACF,QADZ;AAELC,gBAAAA,SAAS,EAAEC,MAAM,CAACD,SAFb;AAGLY,gBAAAA,MAAM,EAAE;AAHH,eAD6C;AAMpDC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,MAAM,EAAEhB,IAAI,CAACiB;AADN;AAN2C,aAA/B,CANf;;AAAA;AAMFC,YAAAA,QANE;AAiBAC,YAAAA,IAjBA,GAiBSD,QAjBT,CAiBAC,IAjBA;AAAA,6CAkBD,IAlBC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,EAoBN,EApBM,CAAT;;AAsBA,MAAIrB,MAAM,IAAIK,MAAM,CAACF,QAAjB,IAA6BE,MAAM,CAACD,SAAxC,EAAmD;AACjD,WACE,4BACE,MAAC,OAAD;AAAS,MAAA,IAAI,EAAEF,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAgBD;;AAED,SACE;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Router from 'next/router';\nimport AppMenu from '../components/AppMenu';\nimport Loading from '../components/Loading';\nimport Map from '../components/Map';\n\nimport auth0 from '../lib/auth0';\nimport getCurrentDate from '../util/getCurrentDate';\nimport { db } from '../lib/firebase';\n\nimport '../styles/app.css';\n\nexport default function App({ isAuth, hasRegisteredDailyStatus, user }) {\n  const [coords, setCoords] = useState({ latitude: null, longitude: null });\n\n  function getUserLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        const { latitude, longitude } = position.coords;\n        setCoords({ latitude, longitude });\n      });\n    } else {\n      alert('Seu navegador não possui suporte a geolocalização');\n      Router.push('/');\n    }\n  }\n\n  useEffect(async () => {\n    if (!isAuth) Router.push('/');\n    if (!hasRegisteredDailyStatus) Router.push('/status');\n\n    getUserLocation();\n\n    const response = await axios.get('/api/nearby-users', {\n      query: {\n        latitude: coords.latitude,\n        longitude: coords.longitude,\n        filter: 'all',\n      },\n      headers: {\n        userId: user.sub,\n      },\n    });\n\n    const { data } = response;\n    return 'ok';\n    console.log(data);\n  }, []);\n\n  if (isAuth && coords.latitude && coords.longitude) {\n    return (\n      <>\n        <AppMenu user={user} />\n        <div className=\"app-container\">\n          {/* <Map\n            nearbyUsers={nearbyUsers}\n            user={user}\n            defaultCenter={{\n              lat: coords.latitude,\n              lng: coords.longitude,\n            }}\n            zoom={13}\n          /> */}\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"center-content fullscreen\">\n      <Loading />\n    </div>\n  );\n}\n\nexport async function getServerSideProps({ req, res }) {\n  const session = await auth0.getSession(req);\n\n  // Verifica se o usuário está logado\n  if (!session) {\n    return {\n      props: {\n        isAuth: false,\n      },\n    };\n  }\n\n  /*\n   * Verifica se o usuário já cadastrou seu status diario\n   */\n  const currentDate = getCurrentDate();\n\n  const userDailyStatus = await db\n    .collection('users')\n    .doc(session.user.sub)\n    .collection('history')\n    .doc(currentDate)\n    .get();\n\n  const todayRegistered = userDailyStatus.data();\n  if (!todayRegistered) {\n    return {\n      props: {\n        isAuth: true,\n        hasRegisteredDailyStatus: false,\n        user: session.user,\n      },\n    };\n  }\n\n  return {\n    props: {\n      isAuth: true,\n      hasRegisteredDailyStatus: true,\n      user: session.user,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}